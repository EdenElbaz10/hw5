import json
import pandas as pd
from typing import Union
import pathlib
import numpy as np
import matplotlib.pyplot as plt

INVALID_INPUT_MESSAGE = '{data_fname} is invalid input'


class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        try:
            self.data_fname = pathlib.Path(data_fname).resolve()
        except:
            message = INVALID_INPUT_MESSAGE.format(data_fname=data_fname)
            raise ValueError(message)

        path=self.data_fname
        if not path.is_file():
            message = INVALID_INPUT_MESSAGE.format(data_fname=data_fname)
            raise ValueError(message)


    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        self.data=pd.read_json(self.data_fname)
        return self.data

    def show_age_distrib(self) -> tuple[np.ndarray, np.ndarray]:
        #Plot the distribution of ages of the participants. The bins for the histogram should be
        # [0, 10), [10, 20), [20, 30), ..., [90, 100]. The function should return the result.
        """Calculates and plots the age distribution of the participants.

    Returns
    -------
    hist : np.ndarray
      Number of people in a given bin
    bins : np.ndarray
      Bin edges
        """
        data=self.data
        age_series=data.loc[:,'age']
        num_bins=np.linspace(0,100,11) #number of bins
        fig, ax = plt.subplots()
        n, bins, patches= ax.hist(age_series,bins=num_bins)
        _ = ax.set_xlabel('Age')
        _=ax.set_ylabel('Number of participants')
        _=ax.set_title('Age distribution of all the participants')
        plt.show()

        return n,bins

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

    Returns
    -------
    df : pd.DataFrame
      A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
      the (ordinal) index after a reset.
        """
        df = self.data
        email_series = df.loc[:, 'email']
        new_df = df.copy()
        for i in range(len(email_series)):
            num_s = email_series[i].count("@")
            num_point = email_series[i].count('.')
            ind_s = email_series[i].find("@")
            if num_s != 1:
                new_df.loc[i, 'email'] = 0
                continue
            if email_series[i][0] == "@":
                new_df.loc[i, 'email'] = 0
                continue
            if email_series[i][-1] == '@':
                new_df.loc[i, 'email'] = 0
                continue
            if email_series[i][ind_s + 1] == ".":
                new_df.loc[i, 'email'] = 0
                continue
            if num_point == 0:
                new_df.loc[i, 'email'] = 0
                continue
            if email_series[i][0] == ".":
                new_df.loc[i, 'email'] = 0
                continue
            if email_series[i][-1] == '.':
                new_df.loc[i, 'email'] = 0
                continue

        df.drop(df[new_df['email'] == 0].index, inplace=True)
        df = df.reset_index()

        return df

    def fill_na_with_mean(self) -> tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

    Returns
    -------
    df : pd.DataFrame
      The corrected DataFrame after insertion of the mean grade
    arr : np.ndarray
          Row indices of the students that their new grades were generated
        """
        df = self.data
        n_df = df.copy()
        any_na = n_df[['q1', 'q2', 'q3', 'q4', 'q5']].isna().any(axis=1).tolist()
        na_arr = np.array([i for i,x in enumerate(any_na) if x])
        for i in range(len(n_df)):
            n_df.loc[i, ['q1', 'q2', 'q3', 'q4', 'q5']] = n_df.loc[i, ['q1', 'q2', 'q3', 'q4', 'q5']].fillna(
                n_df.loc[i, ['q1', 'q2', 'q3', 'q4', 'q5']].mean(axis=0))

        return n_df, na_arr


    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        df = self.data
        n_df = df.copy()
        score_l = []
        na_list = []
        for i in range(len(n_df)):
            na_list.append(n_df.loc[i, ['q1', 'q2', 'q3', 'q4', 'q5']].isna().sum().sum())
            score_l.append(np.mean(n_df.loc[i, ['q1', 'q2', 'q3', 'q4', 'q5']]))
        score_series = pd.Series(score_l).apply(np.floor).astype("uint8").astype("UInt8")
        score_series = score_series.astype("UInt8")
        na_s = pd.Series(na_list)
        score_series[na_s > maximal_nans_per_sub] = pd.NA
        n_df['score'] = score_series
        return n_df




    def correlate_gender_age(self) -> pd.DataFrame:
        """Looks for a correlation between the gender of the subject, their age
        and the score for all five questions.

    Returns
    -------
    pd.DataFrame
        A DataFrame with a MultiIndex containing the gender and whether the subject is above
        40 years of age, and the average score in each of the five questions.
    """
        df = self.data
        n_df = df.copy()
        n_df.set_index(['gender', 'age'], append=True)
        n_df = n_df.dropna(subset=['age'])
        n_df['age'] = n_df['age'] > 40
        grouped = n_df.groupby(['gender', 'age'])
        mean_g = grouped.mean().drop('id', axis=1)
        return mean_g





if __name__=="__main__":
    x=QuestionnaireAnalysis('data.json')
    x.read_data()
    x.show_age_distrib()

if __name__ == "__main__":
    x=QuestionnaireAnalysis('data.json')
    x.read_data()
    rows_with_mail=x.remove_rows_without_mail()

if __name__ == "__main__":
    x = QuestionnaireAnalysis('data.json')
    x.read_data()
    filled_with_mean,arr=x.fill_na_with_mean()

if __name__ == "__main__":
    x = QuestionnaireAnalysis('data.json')
    x.read_data()
    df_with_s=x.score_subjects()

if __name__ == "__main__":
    x = QuestionnaireAnalysis('data.json')
    x.read_data()
    correlate_g_a=x.correlate_gender_age()


